// Automatically generated.  Do not edit!
class CoolNode() extends IO() {
  var id : Int = 0;
  def get_id() : Int = id;
  def set_id(i : Int) : Unit = id = i;

  var line_number : Int = 0;
  def get_line_number() : Int = line_number;
  def set_line_number(i : Int) : Unit = line_number = i;

  override def toString() : String = "@".concat(id.toString());

  def accept(visitor : CoolVisitor) : Any = null;
}

class Program() extends CoolNode() {
  var any_class:Class = null;
  def get_any_class() : Class = any_class;
  def set_any_class(arg : Class) : Unit = any_class = arg;

  var unit_class:Class = null;
  def get_unit_class() : Class = unit_class;
  def set_unit_class(arg : Class) : Unit = unit_class = arg;

  var int_class:Class = null;
  def get_int_class() : Class = int_class;
  def set_int_class(arg : Class) : Unit = int_class = arg;

  var boolean_class:Class = null;
  def get_boolean_class() : Class = boolean_class;
  def set_boolean_class(arg : Class) : Unit = boolean_class = arg;

  var string_class:Class = null;
  def get_string_class() : Class = string_class;
  def set_string_class(arg : Class) : Unit = string_class = arg;

}

class Class() extends CoolNode() {
  var superclass:Class = null;
  def get_superclass() : Class = superclass;
  def set_superclass(arg : Class) : Unit = superclass = arg;

  var inheritablep:Boolean = false;
  def get_inheritablep() : Boolean = inheritablep;
  def set_inheritablep(arg : Boolean) : Unit = inheritablep = arg;

}

class Classes() extends CoolNode() {
  def size() : Int = 0;

  def nth(i : Int) : Class = abort("no more elements");

  def concat(l : Classes) : Classes = new Classes_append(this,l);
  def addcopy(e : Class) : Classes = concat(new Classes_one(e));
  def elements() : ClassesEnumeration = new ClassesEnumeration(this);
}

class Classes_nil() extends Classes() {
  override def concat(l : Classes) : Classes = l;
}

class Classes_one(var arg : Class) extends Classes() {
  def get() : Class = arg;
  override def size() : Int = 1;
  override def nth(i : Int) : Class = if (i == 0) arg else super.nth(i);
  override def accept(v : CoolVisitor) : Any = v.visit_Classes_one(arg);
}

class Classes_append(var l1 : Classes, var l2 : Classes) extends Classes() {
  var n1 : Int = l1.size();
  var n2 : Int = l2.size();
  def get1() : Classes = l1;
  def get2() : Classes = l2;
  override def size() : Int = n1 + n2;
  override def nth(i : Int) : Class = if (i < n1) l1.nth(i) else l2.nth(i-n1);
  override def accept(v : CoolVisitor) : Any = {
    l1.accept(v);
    l2.accept(v);
    null  };
}

class ClassesEnumeration(var sequence : Classes) extends Enumeration() {
  var i : Int = -1;
  var n : Int = sequence.size();
  var a : ArrayAny = new ArrayAny(sequence.size());
  {
    var j : Int = 0;
    if (0 < n) a.set(0,sequence) else ();
    while (j < n) {
      a.get(j) match {
        case s:Classes_one => 
          a.set(j,s.get()); j = j+1
        case s:Classes_append => 
          var s1 : Classes = s.get1();
          var s2 : Classes = s.get2();
          var n1 : Int = s1.size();
          var n2 : Int = s2.size();
          if (0 < n1) a.set(j,s1) else ();
          if (0 < n2) a.set(j+n1,s2) else ()
      }
    }
  };

  override def hasNext() : Boolean = i+1 < n;
  override def next() : Class = {
    i = i + 1;    a.get(i) match {
      case x:Class => x
    }
  };

}

class Feature() extends CoolNode() {
  var owner:Cclass_decl = null;
  def get_owner() : Cclass_decl = owner;
  def set_owner(arg : Cclass_decl) : Unit = owner = arg;

  var overrides:Cmethod = null;
  def get_overrides() : Cmethod = overrides;
  def set_overrides(arg : Cmethod) : Unit = overrides = arg;

  var feature_of_class:Class = null;
  def get_feature_of_class() : Class = feature_of_class;
  def set_feature_of_class(arg : Class) : Unit = feature_of_class = arg;

}

class Features() extends CoolNode() {
  def size() : Int = 0;

  def nth(i : Int) : Feature = abort("no more elements");

  def concat(l : Features) : Features = new Features_append(this,l);
  def addcopy(e : Feature) : Features = concat(new Features_one(e));
  def elements() : FeaturesEnumeration = new FeaturesEnumeration(this);
}

class Features_nil() extends Features() {
  override def concat(l : Features) : Features = l;
}

class Features_one(var arg : Feature) extends Features() {
  def get() : Feature = arg;
  override def size() : Int = 1;
  override def nth(i : Int) : Feature = if (i == 0) arg else super.nth(i);
  override def accept(v : CoolVisitor) : Any = v.visit_Features_one(arg);
}

class Features_append(var l1 : Features, var l2 : Features) extends Features() {
  var n1 : Int = l1.size();
  var n2 : Int = l2.size();
  def get1() : Features = l1;
  def get2() : Features = l2;
  override def size() : Int = n1 + n2;
  override def nth(i : Int) : Feature = if (i < n1) l1.nth(i) else l2.nth(i-n1);
  override def accept(v : CoolVisitor) : Any = {
    l1.accept(v);
    l2.accept(v);
    null  };
}

class FeaturesEnumeration(var sequence : Features) extends Enumeration() {
  var i : Int = -1;
  var n : Int = sequence.size();
  var a : ArrayAny = new ArrayAny(sequence.size());
  {
    var j : Int = 0;
    if (0 < n) a.set(0,sequence) else ();
    while (j < n) {
      a.get(j) match {
        case s:Features_one => 
          a.set(j,s.get()); j = j+1
        case s:Features_append => 
          var s1 : Features = s.get1();
          var s2 : Features = s.get2();
          var n1 : Int = s1.size();
          var n2 : Int = s2.size();
          if (0 < n1) a.set(j,s1) else ();
          if (0 < n2) a.set(j+n1,s2) else ()
      }
    }
  };

  override def hasNext() : Boolean = i+1 < n;
  override def next() : Feature = {
    i = i + 1;    a.get(i) match {
      case x:Feature => x
    }
  };

}

class Formal() extends CoolNode() {
  var formal_of_class:Class = null;
  def get_formal_of_class() : Class = formal_of_class;
  def set_formal_of_class(arg : Class) : Unit = formal_of_class = arg;

}

class Formals() extends CoolNode() {
  def size() : Int = 0;

  def nth(i : Int) : Formal = abort("no more elements");

  def concat(l : Formals) : Formals = new Formals_append(this,l);
  def addcopy(e : Formal) : Formals = concat(new Formals_one(e));
  def elements() : FormalsEnumeration = new FormalsEnumeration(this);
}

class Formals_nil() extends Formals() {
  override def concat(l : Formals) : Formals = l;
}

class Formals_one(var arg : Formal) extends Formals() {
  def get() : Formal = arg;
  override def size() : Int = 1;
  override def nth(i : Int) : Formal = if (i == 0) arg else super.nth(i);
  override def accept(v : CoolVisitor) : Any = v.visit_Formals_one(arg);
}

class Formals_append(var l1 : Formals, var l2 : Formals) extends Formals() {
  var n1 : Int = l1.size();
  var n2 : Int = l2.size();
  def get1() : Formals = l1;
  def get2() : Formals = l2;
  override def size() : Int = n1 + n2;
  override def nth(i : Int) : Formal = if (i < n1) l1.nth(i) else l2.nth(i-n1);
  override def accept(v : CoolVisitor) : Any = {
    l1.accept(v);
    l2.accept(v);
    null  };
}

class FormalsEnumeration(var sequence : Formals) extends Enumeration() {
  var i : Int = -1;
  var n : Int = sequence.size();
  var a : ArrayAny = new ArrayAny(sequence.size());
  {
    var j : Int = 0;
    if (0 < n) a.set(0,sequence) else ();
    while (j < n) {
      a.get(j) match {
        case s:Formals_one => 
          a.set(j,s.get()); j = j+1
        case s:Formals_append => 
          var s1 : Formals = s.get1();
          var s2 : Formals = s.get2();
          var n1 : Int = s1.size();
          var n2 : Int = s2.size();
          if (0 < n1) a.set(j,s1) else ();
          if (0 < n2) a.set(j+n1,s2) else ()
      }
    }
  };

  override def hasNext() : Boolean = i+1 < n;
  override def next() : Formal = {
    i = i + 1;    a.get(i) match {
      case x:Formal => x
    }
  };

}

class Expression() extends CoolNode() {
  var of_type:Symbol = null;
  def get_of_type() : Symbol = of_type;
  def set_of_type(arg : Symbol) : Unit = of_type = arg;

  var of_class:Class = null;
  def get_of_class() : Class = of_class;
  def set_of_class(arg : Class) : Unit = of_class = arg;

  var binding:CoolNode = null;
  def get_binding() : CoolNode = binding;
  def set_binding(arg : CoolNode) : Unit = binding = arg;

  var mbinding:Cmethod = null;
  def get_mbinding() : Cmethod = mbinding;
  def set_mbinding(arg : Cmethod) : Unit = mbinding = arg;

}

class Expressions() extends CoolNode() {
  def size() : Int = 0;

  def nth(i : Int) : Expression = abort("no more elements");

  def concat(l : Expressions) : Expressions = new Expressions_append(this,l);
  def addcopy(e : Expression) : Expressions = concat(new Expressions_one(e));
  def elements() : ExpressionsEnumeration = new ExpressionsEnumeration(this);
}

class Expressions_nil() extends Expressions() {
  override def concat(l : Expressions) : Expressions = l;
}

class Expressions_one(var arg : Expression) extends Expressions() {
  def get() : Expression = arg;
  override def size() : Int = 1;
  override def nth(i : Int) : Expression = if (i == 0) arg else super.nth(i);
  override def accept(v : CoolVisitor) : Any = v.visit_Expressions_one(arg);
}

class Expressions_append(var l1 : Expressions, var l2 : Expressions) extends Expressions() {
  var n1 : Int = l1.size();
  var n2 : Int = l2.size();
  def get1() : Expressions = l1;
  def get2() : Expressions = l2;
  override def size() : Int = n1 + n2;
  override def nth(i : Int) : Expression = if (i < n1) l1.nth(i) else l2.nth(i-n1);
  override def accept(v : CoolVisitor) : Any = {
    l1.accept(v);
    l2.accept(v);
    null  };
}

class ExpressionsEnumeration(var sequence : Expressions) extends Enumeration() {
  var i : Int = -1;
  var n : Int = sequence.size();
  var a : ArrayAny = new ArrayAny(sequence.size());
  {
    var j : Int = 0;
    if (0 < n) a.set(0,sequence) else ();
    while (j < n) {
      a.get(j) match {
        case s:Expressions_one => 
          a.set(j,s.get()); j = j+1
        case s:Expressions_append => 
          var s1 : Expressions = s.get1();
          var s2 : Expressions = s.get2();
          var n1 : Int = s1.size();
          var n2 : Int = s2.size();
          if (0 < n1) a.set(j,s1) else ();
          if (0 < n2) a.set(j+n1,s2) else ()
      }
    }
  };

  override def hasNext() : Boolean = i+1 < n;
  override def next() : Expression = {
    i = i + 1;    a.get(i) match {
      case x:Expression => x
    }
  };

}

class Case() extends CoolNode() {
  var case_of_type:Symbol = null;
  def get_case_of_type() : Symbol = case_of_type;
  def set_case_of_type(arg : Symbol) : Unit = case_of_type = arg;

  var case_of_class:Class = null;
  def get_case_of_class() : Class = case_of_class;
  def set_case_of_class(arg : Class) : Unit = case_of_class = arg;

}

class Cases() extends CoolNode() {
  def size() : Int = 0;

  def nth(i : Int) : Case = abort("no more elements");

  def concat(l : Cases) : Cases = new Cases_append(this,l);
  def addcopy(e : Case) : Cases = concat(new Cases_one(e));
  def elements() : CasesEnumeration = new CasesEnumeration(this);
}

class Cases_nil() extends Cases() {
  override def concat(l : Cases) : Cases = l;
}

class Cases_one(var arg : Case) extends Cases() {
  def get() : Case = arg;
  override def size() : Int = 1;
  override def nth(i : Int) : Case = if (i == 0) arg else super.nth(i);
  override def accept(v : CoolVisitor) : Any = v.visit_Cases_one(arg);
}

class Cases_append(var l1 : Cases, var l2 : Cases) extends Cases() {
  var n1 : Int = l1.size();
  var n2 : Int = l2.size();
  def get1() : Cases = l1;
  def get2() : Cases = l2;
  override def size() : Int = n1 + n2;
  override def nth(i : Int) : Case = if (i < n1) l1.nth(i) else l2.nth(i-n1);
  override def accept(v : CoolVisitor) : Any = {
    l1.accept(v);
    l2.accept(v);
    null  };
}

class CasesEnumeration(var sequence : Cases) extends Enumeration() {
  var i : Int = -1;
  var n : Int = sequence.size();
  var a : ArrayAny = new ArrayAny(sequence.size());
  {
    var j : Int = 0;
    if (0 < n) a.set(0,sequence) else ();
    while (j < n) {
      a.get(j) match {
        case s:Cases_one => 
          a.set(j,s.get()); j = j+1
        case s:Cases_append => 
          var s1 : Cases = s.get1();
          var s2 : Cases = s.get2();
          var n1 : Int = s1.size();
          var n2 : Int = s2.size();
          if (0 < n1) a.set(j,s1) else ();
          if (0 < n2) a.set(j+n1,s2) else ()
      }
    }
  };

  override def hasNext() : Boolean = i+1 < n;
  override def next() : Case = {
    i = i + 1;    a.get(i) match {
      case x:Case => x
    }
  };

}

class Cprogram(var classes:Classes) extends Program() {
  def get_classes() : Classes = classes;
  def set_classes(new_classes : Classes) :Unit = classes = new_classes;

  override def accept(v : CoolVisitor) : Any = v.visit_program(this,classes);
}

class Cclass_decl(var name:Symbol,var parent:Symbol,var features:Features,var filename:Symbol) extends Class() {
  def get_name() : Symbol = name;
  def set_name(new_name : Symbol) :Unit = name = new_name;
  def get_parent() : Symbol = parent;
  def set_parent(new_parent : Symbol) :Unit = parent = new_parent;
  def get_features() : Features = features;
  def set_features(new_features : Features) :Unit = features = new_features;
  def get_filename() : Symbol = filename;
  def set_filename(new_filename : Symbol) :Unit = filename = new_filename;

  override def accept(v : CoolVisitor) : Any = v.visit_class_decl(this,name,parent,features,filename);
}

class Cmethod(var overridep:Boolean,var name:Symbol,var formals:Formals,var return_type:Symbol,var expr:Expression) extends Feature() {
  def get_overridep() : Boolean = overridep;
  def set_overridep(new_overridep : Boolean) :Unit = overridep = new_overridep;
  def get_name() : Symbol = name;
  def set_name(new_name : Symbol) :Unit = name = new_name;
  def get_formals() : Formals = formals;
  def set_formals(new_formals : Formals) :Unit = formals = new_formals;
  def get_return_type() : Symbol = return_type;
  def set_return_type(new_return_type : Symbol) :Unit = return_type = new_return_type;
  def get_expr() : Expression = expr;
  def set_expr(new_expr : Expression) :Unit = expr = new_expr;

  override def accept(v : CoolVisitor) : Any = v.visit_method(this,overridep,name,formals,return_type,expr);
}

class Cattr(var name:Symbol,var of_type:Symbol) extends Feature() {
  def get_name() : Symbol = name;
  def set_name(new_name : Symbol) :Unit = name = new_name;
  def get_of_type() : Symbol = of_type;
  def set_of_type(new_of_type : Symbol) :Unit = of_type = new_of_type;

  override def accept(v : CoolVisitor) : Any = v.visit_attr(this,name,of_type);
}

class Cformal(var name:Symbol,var of_type:Symbol) extends Formal() {
  def get_name() : Symbol = name;
  def set_name(new_name : Symbol) :Unit = name = new_name;
  def get_of_type() : Symbol = of_type;
  def set_of_type(new_of_type : Symbol) :Unit = of_type = new_of_type;

  override def accept(v : CoolVisitor) : Any = v.visit_formal(this,name,of_type);
}

class Cbranch(var name:Symbol,var local_type:Symbol,var expr:Expression) extends Case() {
  def get_name() : Symbol = name;
  def set_name(new_name : Symbol) :Unit = name = new_name;
  def get_local_type() : Symbol = local_type;
  def set_local_type(new_local_type : Symbol) :Unit = local_type = new_local_type;
  def get_expr() : Expression = expr;
  def set_expr(new_expr : Expression) :Unit = expr = new_expr;

  override def accept(v : CoolVisitor) : Any = v.visit_branch(this,name,local_type,expr);
}

class Cassign(var name:Symbol,var expr:Expression) extends Expression() {
  def get_name() : Symbol = name;
  def set_name(new_name : Symbol) :Unit = name = new_name;
  def get_expr() : Expression = expr;
  def set_expr(new_expr : Expression) :Unit = expr = new_expr;

  override def accept(v : CoolVisitor) : Any = v.visit_assign(this,name,expr);
}

class Cstatic_dispatch(var expr:Expression,var type_name:Symbol,var name:Symbol,var actuals:Expressions) extends Expression() {
  def get_expr() : Expression = expr;
  def set_expr(new_expr : Expression) :Unit = expr = new_expr;
  def get_type_name() : Symbol = type_name;
  def set_type_name(new_type_name : Symbol) :Unit = type_name = new_type_name;
  def get_name() : Symbol = name;
  def set_name(new_name : Symbol) :Unit = name = new_name;
  def get_actuals() : Expressions = actuals;
  def set_actuals(new_actuals : Expressions) :Unit = actuals = new_actuals;

  override def accept(v : CoolVisitor) : Any = v.visit_static_dispatch(this,expr,type_name,name,actuals);
}

class Cdispatch(var expr:Expression,var name:Symbol,var actuals:Expressions) extends Expression() {
  def get_expr() : Expression = expr;
  def set_expr(new_expr : Expression) :Unit = expr = new_expr;
  def get_name() : Symbol = name;
  def set_name(new_name : Symbol) :Unit = name = new_name;
  def get_actuals() : Expressions = actuals;
  def set_actuals(new_actuals : Expressions) :Unit = actuals = new_actuals;

  override def accept(v : CoolVisitor) : Any = v.visit_dispatch(this,expr,name,actuals);
}

class Ccond(var pred:Expression,var then_exp:Expression,var else_exp:Expression) extends Expression() {
  def get_pred() : Expression = pred;
  def set_pred(new_pred : Expression) :Unit = pred = new_pred;
  def get_then_exp() : Expression = then_exp;
  def set_then_exp(new_then_exp : Expression) :Unit = then_exp = new_then_exp;
  def get_else_exp() : Expression = else_exp;
  def set_else_exp(new_else_exp : Expression) :Unit = else_exp = new_else_exp;

  override def accept(v : CoolVisitor) : Any = v.visit_cond(this,pred,then_exp,else_exp);
}

class Cloop(var pred:Expression,var body:Expression) extends Expression() {
  def get_pred() : Expression = pred;
  def set_pred(new_pred : Expression) :Unit = pred = new_pred;
  def get_body() : Expression = body;
  def set_body(new_body : Expression) :Unit = body = new_body;

  override def accept(v : CoolVisitor) : Any = v.visit_loop(this,pred,body);
}

class Ctypecase(var expr:Expression,var cases:Cases) extends Expression() {
  def get_expr() : Expression = expr;
  def set_expr(new_expr : Expression) :Unit = expr = new_expr;
  def get_cases() : Cases = cases;
  def set_cases(new_cases : Cases) :Unit = cases = new_cases;

  override def accept(v : CoolVisitor) : Any = v.visit_typecase(this,expr,cases);
}

class Cblock(var body:Expressions) extends Expression() {
  def get_body() : Expressions = body;
  def set_body(new_body : Expressions) :Unit = body = new_body;

  override def accept(v : CoolVisitor) : Any = v.visit_block(this,body);
}

class Clet(var identifier:Symbol,var local_type:Symbol,var init:Expression,var body:Expression) extends Expression() {
  def get_identifier() : Symbol = identifier;
  def set_identifier(new_identifier : Symbol) :Unit = identifier = new_identifier;
  def get_local_type() : Symbol = local_type;
  def set_local_type(new_local_type : Symbol) :Unit = local_type = new_local_type;
  def get_init() : Expression = init;
  def set_init(new_init : Expression) :Unit = init = new_init;
  def get_body() : Expression = body;
  def set_body(new_body : Expression) :Unit = body = new_body;

  override def accept(v : CoolVisitor) : Any = v.visit_let(this,identifier,local_type,init,body);
}

class Cadd(var e1:Expression,var e2:Expression) extends Expression() {
  def get_e1() : Expression = e1;
  def set_e1(new_e1 : Expression) :Unit = e1 = new_e1;
  def get_e2() : Expression = e2;
  def set_e2(new_e2 : Expression) :Unit = e2 = new_e2;

  override def accept(v : CoolVisitor) : Any = v.visit_add(this,e1,e2);
}

class Csub(var e1:Expression,var e2:Expression) extends Expression() {
  def get_e1() : Expression = e1;
  def set_e1(new_e1 : Expression) :Unit = e1 = new_e1;
  def get_e2() : Expression = e2;
  def set_e2(new_e2 : Expression) :Unit = e2 = new_e2;

  override def accept(v : CoolVisitor) : Any = v.visit_sub(this,e1,e2);
}

class Cmul(var e1:Expression,var e2:Expression) extends Expression() {
  def get_e1() : Expression = e1;
  def set_e1(new_e1 : Expression) :Unit = e1 = new_e1;
  def get_e2() : Expression = e2;
  def set_e2(new_e2 : Expression) :Unit = e2 = new_e2;

  override def accept(v : CoolVisitor) : Any = v.visit_mul(this,e1,e2);
}

class Cdiv(var e1:Expression,var e2:Expression) extends Expression() {
  def get_e1() : Expression = e1;
  def set_e1(new_e1 : Expression) :Unit = e1 = new_e1;
  def get_e2() : Expression = e2;
  def set_e2(new_e2 : Expression) :Unit = e2 = new_e2;

  override def accept(v : CoolVisitor) : Any = v.visit_div(this,e1,e2);
}

class Cneg(var e1:Expression) extends Expression() {
  def get_e1() : Expression = e1;
  def set_e1(new_e1 : Expression) :Unit = e1 = new_e1;

  override def accept(v : CoolVisitor) : Any = v.visit_neg(this,e1);
}

class Clt(var e1:Expression,var e2:Expression) extends Expression() {
  def get_e1() : Expression = e1;
  def set_e1(new_e1 : Expression) :Unit = e1 = new_e1;
  def get_e2() : Expression = e2;
  def set_e2(new_e2 : Expression) :Unit = e2 = new_e2;

  override def accept(v : CoolVisitor) : Any = v.visit_lt(this,e1,e2);
}

class Cleq(var e1:Expression,var e2:Expression) extends Expression() {
  def get_e1() : Expression = e1;
  def set_e1(new_e1 : Expression) :Unit = e1 = new_e1;
  def get_e2() : Expression = e2;
  def set_e2(new_e2 : Expression) :Unit = e2 = new_e2;

  override def accept(v : CoolVisitor) : Any = v.visit_leq(this,e1,e2);
}

class Ccomp(var e1:Expression) extends Expression() {
  def get_e1() : Expression = e1;
  def set_e1(new_e1 : Expression) :Unit = e1 = new_e1;

  override def accept(v : CoolVisitor) : Any = v.visit_comp(this,e1);
}

class Cint_lit(var token:Symbol) extends Expression() {
  def get_token() : Symbol = token;
  def set_token(new_token : Symbol) :Unit = token = new_token;

  override def accept(v : CoolVisitor) : Any = v.visit_int_lit(this,token);
}

class Cbool_lit(var value:Boolean) extends Expression() {
  def get_value() : Boolean = value;
  def set_value(new_value : Boolean) :Unit = value = new_value;

  override def accept(v : CoolVisitor) : Any = v.visit_bool_lit(this,value);
}

class Cstring_lit(var token:Symbol) extends Expression() {
  def get_token() : Symbol = token;
  def set_token(new_token : Symbol) :Unit = token = new_token;

  override def accept(v : CoolVisitor) : Any = v.visit_string_lit(this,token);
}

class Calloc(var type_name:Symbol) extends Expression() {
  def get_type_name() : Symbol = type_name;
  def set_type_name(new_type_name : Symbol) :Unit = type_name = new_type_name;

  override def accept(v : CoolVisitor) : Any = v.visit_alloc(this,type_name);
}

class Cnil() extends Expression() {

  override def accept(v : CoolVisitor) : Any = v.visit_nil(this);
}

class Cunit() extends Expression() {

  override def accept(v : CoolVisitor) : Any = v.visit_unit(this);
}

class Cno_expr() extends Expression() {

  override def accept(v : CoolVisitor) : Any = v.visit_no_expr(this);
}

class Cvariable(var name:Symbol) extends Expression() {
  def get_name() : Symbol = name;
  def set_name(new_name : Symbol) :Unit = name = new_name;

  override def accept(v : CoolVisitor) : Any = v.visit_variable(this,name);
}
// Automatically generated.  Do not edit!
class CoolNodeFactory(var node_id : Int) {
  def get_line_number() : Int = 0;

  def get_node_number() : Int = {
    node_id = node_id + 1; node_id
  };
  def set_node_numbers(n: CoolNode) : Unit = {
    n.set_id(get_node_number());
    n.set_line_number(get_line_number())
  };

  def program(classes:Classes) : Cprogram = {
    var n : Cprogram = new Cprogram(classes);
    set_node_numbers(n);
    n
  };

  def class_decl(name:Symbol,parent:Symbol,features:Features,filename:Symbol) : Cclass_decl = {
    var n : Cclass_decl = new Cclass_decl(name,parent,features,filename);
    set_node_numbers(n);
    n
  };

  def method(overridep:Boolean,name:Symbol,formals:Formals,return_type:Symbol,expr:Expression) : Cmethod = {
    var n : Cmethod = new Cmethod(overridep,name,formals,return_type,expr);
    set_node_numbers(n);
    n
  };

  def attr(name:Symbol,of_type:Symbol) : Cattr = {
    var n : Cattr = new Cattr(name,of_type);
    set_node_numbers(n);
    n
  };

  def formal(name:Symbol,of_type:Symbol) : Cformal = {
    var n : Cformal = new Cformal(name,of_type);
    set_node_numbers(n);
    n
  };

  def branch(name:Symbol,local_type:Symbol,expr:Expression) : Cbranch = {
    var n : Cbranch = new Cbranch(name,local_type,expr);
    set_node_numbers(n);
    n
  };

  def assign(name:Symbol,expr:Expression) : Cassign = {
    var n : Cassign = new Cassign(name,expr);
    set_node_numbers(n);
    n
  };

  def static_dispatch(expr:Expression,type_name:Symbol,name:Symbol,actuals:Expressions) : Cstatic_dispatch = {
    var n : Cstatic_dispatch = new Cstatic_dispatch(expr,type_name,name,actuals);
    set_node_numbers(n);
    n
  };

  def dispatch(expr:Expression,name:Symbol,actuals:Expressions) : Cdispatch = {
    var n : Cdispatch = new Cdispatch(expr,name,actuals);
    set_node_numbers(n);
    n
  };

  def cond(pred:Expression,then_exp:Expression,else_exp:Expression) : Ccond = {
    var n : Ccond = new Ccond(pred,then_exp,else_exp);
    set_node_numbers(n);
    n
  };

  def loop(pred:Expression,body:Expression) : Cloop = {
    var n : Cloop = new Cloop(pred,body);
    set_node_numbers(n);
    n
  };

  def typecase(expr:Expression,cases:Cases) : Ctypecase = {
    var n : Ctypecase = new Ctypecase(expr,cases);
    set_node_numbers(n);
    n
  };

  def block(body:Expressions) : Cblock = {
    var n : Cblock = new Cblock(body);
    set_node_numbers(n);
    n
  };

  def let(identifier:Symbol,local_type:Symbol,init:Expression,body:Expression) : Clet = {
    var n : Clet = new Clet(identifier,local_type,init,body);
    set_node_numbers(n);
    n
  };

  def add(e1:Expression,e2:Expression) : Cadd = {
    var n : Cadd = new Cadd(e1,e2);
    set_node_numbers(n);
    n
  };

  def sub(e1:Expression,e2:Expression) : Csub = {
    var n : Csub = new Csub(e1,e2);
    set_node_numbers(n);
    n
  };

  def mul(e1:Expression,e2:Expression) : Cmul = {
    var n : Cmul = new Cmul(e1,e2);
    set_node_numbers(n);
    n
  };

  def div(e1:Expression,e2:Expression) : Cdiv = {
    var n : Cdiv = new Cdiv(e1,e2);
    set_node_numbers(n);
    n
  };

  def neg(e1:Expression) : Cneg = {
    var n : Cneg = new Cneg(e1);
    set_node_numbers(n);
    n
  };

  def lt(e1:Expression,e2:Expression) : Clt = {
    var n : Clt = new Clt(e1,e2);
    set_node_numbers(n);
    n
  };

  def leq(e1:Expression,e2:Expression) : Cleq = {
    var n : Cleq = new Cleq(e1,e2);
    set_node_numbers(n);
    n
  };

  def comp(e1:Expression) : Ccomp = {
    var n : Ccomp = new Ccomp(e1);
    set_node_numbers(n);
    n
  };

  def int_lit(token:Symbol) : Cint_lit = {
    var n : Cint_lit = new Cint_lit(token);
    set_node_numbers(n);
    n
  };

  def bool_lit(value:Boolean) : Cbool_lit = {
    var n : Cbool_lit = new Cbool_lit(value);
    set_node_numbers(n);
    n
  };

  def string_lit(token:Symbol) : Cstring_lit = {
    var n : Cstring_lit = new Cstring_lit(token);
    set_node_numbers(n);
    n
  };

  def alloc(type_name:Symbol) : Calloc = {
    var n : Calloc = new Calloc(type_name);
    set_node_numbers(n);
    n
  };

  def nil() : Cnil = {
    var n : Cnil = new Cnil();
    set_node_numbers(n);
    n
  };

  def unit() : Cunit = {
    var n : Cunit = new Cunit();
    set_node_numbers(n);
    n
  };

  def no_expr() : Cno_expr = {
    var n : Cno_expr = new Cno_expr();
    set_node_numbers(n);
    n
  };

  def variable(name:Symbol) : Cvariable = {
    var n : Cvariable = new Cvariable(name);
    set_node_numbers(n);
    n
  };
}
// Automatically generated.  Do not edit!
class CoolVisitor() extends IO() {
  def visit_CoolNode(node:CoolNode) : Any = {
    abort("No visitor for ".concat(node.toString()))
  };

  def visit_Program(node:Program) : Any = visit_CoolNode(node);

  def visit_Class(node:Class) : Any = visit_CoolNode(node);

  def visit_Classes_one(node:Class) : Any = 
    abort("No visitor for Classes elements");

  def visit_Feature(node:Feature) : Any = visit_CoolNode(node);

  def visit_Features_one(node:Feature) : Any = 
    abort("No visitor for Features elements");

  def visit_Formal(node:Formal) : Any = visit_CoolNode(node);

  def visit_Formals_one(node:Formal) : Any = 
    abort("No visitor for Formals elements");

  def visit_Expression(node:Expression) : Any = visit_CoolNode(node);

  def visit_Expressions_one(node:Expression) : Any = 
    abort("No visitor for Expressions elements");

  def visit_Case(node:Case) : Any = visit_CoolNode(node);

  def visit_Cases_one(node:Case) : Any = 
    abort("No visitor for Cases elements");

  def visit_program(the_node:Cprogram,classes:Classes) : Any = 
    visit_Program(the_node);

  def visit_class_decl(the_node:Cclass_decl,name:Symbol,parent:Symbol,features:Features,filename:Symbol) : Any = 
    visit_Class(the_node);

  def visit_method(the_node:Cmethod,overridep:Boolean,name:Symbol,formals:Formals,return_type:Symbol,expr:Expression) : Any = 
    visit_Feature(the_node);

  def visit_attr(the_node:Cattr,name:Symbol,of_type:Symbol) : Any = 
    visit_Feature(the_node);

  def visit_formal(the_node:Cformal,name:Symbol,of_type:Symbol) : Any = 
    visit_Formal(the_node);

  def visit_branch(the_node:Cbranch,name:Symbol,local_type:Symbol,expr:Expression) : Any = 
    visit_Case(the_node);

  def visit_assign(the_node:Cassign,name:Symbol,expr:Expression) : Any = 
    visit_Expression(the_node);

  def visit_static_dispatch(the_node:Cstatic_dispatch,expr:Expression,type_name:Symbol,name:Symbol,actuals:Expressions) : Any = 
    visit_Expression(the_node);

  def visit_dispatch(the_node:Cdispatch,expr:Expression,name:Symbol,actuals:Expressions) : Any = 
    visit_Expression(the_node);

  def visit_cond(the_node:Ccond,pred:Expression,then_exp:Expression,else_exp:Expression) : Any = 
    visit_Expression(the_node);

  def visit_loop(the_node:Cloop,pred:Expression,body:Expression) : Any = 
    visit_Expression(the_node);

  def visit_typecase(the_node:Ctypecase,expr:Expression,cases:Cases) : Any = 
    visit_Expression(the_node);

  def visit_block(the_node:Cblock,body:Expressions) : Any = 
    visit_Expression(the_node);

  def visit_let(the_node:Clet,identifier:Symbol,local_type:Symbol,init:Expression,body:Expression) : Any = 
    visit_Expression(the_node);

  def visit_add(the_node:Cadd,e1:Expression,e2:Expression) : Any = 
    visit_Expression(the_node);

  def visit_sub(the_node:Csub,e1:Expression,e2:Expression) : Any = 
    visit_Expression(the_node);

  def visit_mul(the_node:Cmul,e1:Expression,e2:Expression) : Any = 
    visit_Expression(the_node);

  def visit_div(the_node:Cdiv,e1:Expression,e2:Expression) : Any = 
    visit_Expression(the_node);

  def visit_neg(the_node:Cneg,e1:Expression) : Any = 
    visit_Expression(the_node);

  def visit_lt(the_node:Clt,e1:Expression,e2:Expression) : Any = 
    visit_Expression(the_node);

  def visit_leq(the_node:Cleq,e1:Expression,e2:Expression) : Any = 
    visit_Expression(the_node);

  def visit_comp(the_node:Ccomp,e1:Expression) : Any = 
    visit_Expression(the_node);

  def visit_int_lit(the_node:Cint_lit,token:Symbol) : Any = 
    visit_Expression(the_node);

  def visit_bool_lit(the_node:Cbool_lit,value:Boolean) : Any = 
    visit_Expression(the_node);

  def visit_string_lit(the_node:Cstring_lit,token:Symbol) : Any = 
    visit_Expression(the_node);

  def visit_alloc(the_node:Calloc,type_name:Symbol) : Any = 
    visit_Expression(the_node);

  def visit_nil(the_node:Cnil) : Any = 
    visit_Expression(the_node);

  def visit_unit(the_node:Cunit) : Any = 
    visit_Expression(the_node);

  def visit_no_expr(the_node:Cno_expr) : Any = 
    visit_Expression(the_node);

  def visit_variable(the_node:Cvariable,name:Symbol) : Any = 
    visit_Expression(the_node);
}
// Automatically generated.  Do not edit!
class CoolTreeVisitor() extends CoolVisitor() {
  override def visit_CoolNode(node:CoolNode) : Any = null;

  override def visit_Classes_one(node:Class) : Any = node.accept(this);

  override def visit_Features_one(node:Feature) : Any = node.accept(this);

  override def visit_Formals_one(node:Formal) : Any = node.accept(this);

  override def visit_Expressions_one(node:Expression) : Any = node.accept(this);

  override def visit_Cases_one(node:Case) : Any = node.accept(this);

  override def visit_program(the_node:Cprogram,classes:Classes) : Any = {
    visit_Program(the_node);
    classes.accept(this);
    null
  };

  override def visit_class_decl(the_node:Cclass_decl,name:Symbol,parent:Symbol,features:Features,filename:Symbol) : Any = {
    visit_Class(the_node);
    features.accept(this);
    null
  };

  override def visit_method(the_node:Cmethod,overridep:Boolean,name:Symbol,formals:Formals,return_type:Symbol,expr:Expression) : Any = {
    visit_Feature(the_node);
    formals.accept(this);
    expr.accept(this);
    null
  };

  override def visit_attr(the_node:Cattr,name:Symbol,of_type:Symbol) : Any = {
    visit_Feature(the_node);
    null
  };

  override def visit_formal(the_node:Cformal,name:Symbol,of_type:Symbol) : Any = {
    visit_Formal(the_node);
    null
  };

  override def visit_branch(the_node:Cbranch,name:Symbol,local_type:Symbol,expr:Expression) : Any = {
    visit_Case(the_node);
    expr.accept(this);
    null
  };

  override def visit_assign(the_node:Cassign,name:Symbol,expr:Expression) : Any = {
    visit_Expression(the_node);
    expr.accept(this);
    null
  };

  override def visit_static_dispatch(the_node:Cstatic_dispatch,expr:Expression,type_name:Symbol,name:Symbol,actuals:Expressions) : Any = {
    visit_Expression(the_node);
    expr.accept(this);
    actuals.accept(this);
    null
  };

  override def visit_dispatch(the_node:Cdispatch,expr:Expression,name:Symbol,actuals:Expressions) : Any = {
    visit_Expression(the_node);
    expr.accept(this);
    actuals.accept(this);
    null
  };

  override def visit_cond(the_node:Ccond,pred:Expression,then_exp:Expression,else_exp:Expression) : Any = {
    visit_Expression(the_node);
    pred.accept(this);
    then_exp.accept(this);
    else_exp.accept(this);
    null
  };

  override def visit_loop(the_node:Cloop,pred:Expression,body:Expression) : Any = {
    visit_Expression(the_node);
    pred.accept(this);
    body.accept(this);
    null
  };

  override def visit_typecase(the_node:Ctypecase,expr:Expression,cases:Cases) : Any = {
    visit_Expression(the_node);
    expr.accept(this);
    cases.accept(this);
    null
  };

  override def visit_block(the_node:Cblock,body:Expressions) : Any = {
    visit_Expression(the_node);
    body.accept(this);
    null
  };

  override def visit_let(the_node:Clet,identifier:Symbol,local_type:Symbol,init:Expression,body:Expression) : Any = {
    visit_Expression(the_node);
    init.accept(this);
    body.accept(this);
    null
  };

  override def visit_add(the_node:Cadd,e1:Expression,e2:Expression) : Any = {
    visit_Expression(the_node);
    e1.accept(this);
    e2.accept(this);
    null
  };

  override def visit_sub(the_node:Csub,e1:Expression,e2:Expression) : Any = {
    visit_Expression(the_node);
    e1.accept(this);
    e2.accept(this);
    null
  };

  override def visit_mul(the_node:Cmul,e1:Expression,e2:Expression) : Any = {
    visit_Expression(the_node);
    e1.accept(this);
    e2.accept(this);
    null
  };

  override def visit_div(the_node:Cdiv,e1:Expression,e2:Expression) : Any = {
    visit_Expression(the_node);
    e1.accept(this);
    e2.accept(this);
    null
  };

  override def visit_neg(the_node:Cneg,e1:Expression) : Any = {
    visit_Expression(the_node);
    e1.accept(this);
    null
  };

  override def visit_lt(the_node:Clt,e1:Expression,e2:Expression) : Any = {
    visit_Expression(the_node);
    e1.accept(this);
    e2.accept(this);
    null
  };

  override def visit_leq(the_node:Cleq,e1:Expression,e2:Expression) : Any = {
    visit_Expression(the_node);
    e1.accept(this);
    e2.accept(this);
    null
  };

  override def visit_comp(the_node:Ccomp,e1:Expression) : Any = {
    visit_Expression(the_node);
    e1.accept(this);
    null
  };

  override def visit_int_lit(the_node:Cint_lit,token:Symbol) : Any = {
    visit_Expression(the_node);
    null
  };

  override def visit_bool_lit(the_node:Cbool_lit,value:Boolean) : Any = {
    visit_Expression(the_node);
    null
  };

  override def visit_string_lit(the_node:Cstring_lit,token:Symbol) : Any = {
    visit_Expression(the_node);
    null
  };

  override def visit_alloc(the_node:Calloc,type_name:Symbol) : Any = {
    visit_Expression(the_node);
    null
  };

  override def visit_nil(the_node:Cnil) : Any = {
    visit_Expression(the_node);
    null
  };

  override def visit_unit(the_node:Cunit) : Any = {
    visit_Expression(the_node);
    null
  };

  override def visit_no_expr(the_node:Cno_expr) : Any = {
    visit_Expression(the_node);
    null
  };

  override def visit_variable(the_node:Cvariable,name:Symbol) : Any = {
    visit_Expression(the_node);
    null
  };
}
// Automatically generated.  Do not edit!
class CoolTreeModifier() extends CoolVisitor() {
  var line_number : Int = 0;
  def get_line_number() : Int = line_number;

  override def visit_Program(n:Program) : Program = {
    line_number = n.get_line_number();
    n.accept(this) match {
      case nn:Program => nn
    }
  };

  override def visit_Class(n:Class) : Class = {
    line_number = n.get_line_number();
    n.accept(this) match {
      case nn:Class => nn
    }
  };

  def visit_Classes(node:Classes) : Classes = {
    line_number = node.get_line_number();
    node match {
      case a:Classes_append => visit_Classes(a.get1()).concat(visit_Classes(a.get2()))
      case a:Classes_one => visit_Classes_one(a.get())
      case a:Classes_nil => a
    }
  };
  override def visit_Classes_one(node:Class) : Classes = {
    line_number = node.get_line_number();
    new Classes_one(visit_Class(node))
  };

  override def visit_Feature(n:Feature) : Feature = {
    line_number = n.get_line_number();
    n.accept(this) match {
      case nn:Feature => nn
    }
  };

  def visit_Features(node:Features) : Features = {
    line_number = node.get_line_number();
    node match {
      case a:Features_append => visit_Features(a.get1()).concat(visit_Features(a.get2()))
      case a:Features_one => visit_Features_one(a.get())
      case a:Features_nil => a
    }
  };
  override def visit_Features_one(node:Feature) : Features = {
    line_number = node.get_line_number();
    new Features_one(visit_Feature(node))
  };

  override def visit_Formal(n:Formal) : Formal = {
    line_number = n.get_line_number();
    n.accept(this) match {
      case nn:Formal => nn
    }
  };

  def visit_Formals(node:Formals) : Formals = {
    line_number = node.get_line_number();
    node match {
      case a:Formals_append => visit_Formals(a.get1()).concat(visit_Formals(a.get2()))
      case a:Formals_one => visit_Formals_one(a.get())
      case a:Formals_nil => a
    }
  };
  override def visit_Formals_one(node:Formal) : Formals = {
    line_number = node.get_line_number();
    new Formals_one(visit_Formal(node))
  };

  override def visit_Expression(n:Expression) : Expression = {
    line_number = n.get_line_number();
    n.accept(this) match {
      case nn:Expression => nn
    }
  };

  def visit_Expressions(node:Expressions) : Expressions = {
    line_number = node.get_line_number();
    node match {
      case a:Expressions_append => visit_Expressions(a.get1()).concat(visit_Expressions(a.get2()))
      case a:Expressions_one => visit_Expressions_one(a.get())
      case a:Expressions_nil => a
    }
  };
  override def visit_Expressions_one(node:Expression) : Expressions = {
    line_number = node.get_line_number();
    new Expressions_one(visit_Expression(node))
  };

  override def visit_Case(n:Case) : Case = {
    line_number = n.get_line_number();
    n.accept(this) match {
      case nn:Case => nn
    }
  };

  def visit_Cases(node:Cases) : Cases = {
    line_number = node.get_line_number();
    node match {
      case a:Cases_append => visit_Cases(a.get1()).concat(visit_Cases(a.get2()))
      case a:Cases_one => visit_Cases_one(a.get())
      case a:Cases_nil => a
    }
  };
  override def visit_Cases_one(node:Case) : Cases = {
    line_number = node.get_line_number();
    new Cases_one(visit_Case(node))
  };

  override def visit_program(the_node:Cprogram,classes:Classes) : Program = {
    the_node.set_classes(visit_Classes(classes));
    the_node
  };

  override def visit_class_decl(the_node:Cclass_decl,name:Symbol,parent:Symbol,features:Features,filename:Symbol) : Class = {
    the_node.set_features(visit_Features(features));
    the_node
  };

  override def visit_method(the_node:Cmethod,overridep:Boolean,name:Symbol,formals:Formals,return_type:Symbol,expr:Expression) : Feature = {
    the_node.set_formals(visit_Formals(formals));
    the_node.set_expr(visit_Expression(expr));
    the_node
  };

  override def visit_attr(the_node:Cattr,name:Symbol,of_type:Symbol) : Feature = {
    the_node
  };

  override def visit_formal(the_node:Cformal,name:Symbol,of_type:Symbol) : Formal = {
    the_node
  };

  override def visit_branch(the_node:Cbranch,name:Symbol,local_type:Symbol,expr:Expression) : Case = {
    the_node.set_expr(visit_Expression(expr));
    the_node
  };

  override def visit_assign(the_node:Cassign,name:Symbol,expr:Expression) : Expression = {
    the_node.set_expr(visit_Expression(expr));
    the_node
  };

  override def visit_static_dispatch(the_node:Cstatic_dispatch,expr:Expression,type_name:Symbol,name:Symbol,actuals:Expressions) : Expression = {
    the_node.set_expr(visit_Expression(expr));
    the_node.set_actuals(visit_Expressions(actuals));
    the_node
  };

  override def visit_dispatch(the_node:Cdispatch,expr:Expression,name:Symbol,actuals:Expressions) : Expression = {
    the_node.set_expr(visit_Expression(expr));
    the_node.set_actuals(visit_Expressions(actuals));
    the_node
  };

  override def visit_cond(the_node:Ccond,pred:Expression,then_exp:Expression,else_exp:Expression) : Expression = {
    the_node.set_pred(visit_Expression(pred));
    the_node.set_then_exp(visit_Expression(then_exp));
    the_node.set_else_exp(visit_Expression(else_exp));
    the_node
  };

  override def visit_loop(the_node:Cloop,pred:Expression,body:Expression) : Expression = {
    the_node.set_pred(visit_Expression(pred));
    the_node.set_body(visit_Expression(body));
    the_node
  };

  override def visit_typecase(the_node:Ctypecase,expr:Expression,cases:Cases) : Expression = {
    the_node.set_expr(visit_Expression(expr));
    the_node.set_cases(visit_Cases(cases));
    the_node
  };

  override def visit_block(the_node:Cblock,body:Expressions) : Expression = {
    the_node.set_body(visit_Expressions(body));
    the_node
  };

  override def visit_let(the_node:Clet,identifier:Symbol,local_type:Symbol,init:Expression,body:Expression) : Expression = {
    the_node.set_init(visit_Expression(init));
    the_node.set_body(visit_Expression(body));
    the_node
  };

  override def visit_add(the_node:Cadd,e1:Expression,e2:Expression) : Expression = {
    the_node.set_e1(visit_Expression(e1));
    the_node.set_e2(visit_Expression(e2));
    the_node
  };

  override def visit_sub(the_node:Csub,e1:Expression,e2:Expression) : Expression = {
    the_node.set_e1(visit_Expression(e1));
    the_node.set_e2(visit_Expression(e2));
    the_node
  };

  override def visit_mul(the_node:Cmul,e1:Expression,e2:Expression) : Expression = {
    the_node.set_e1(visit_Expression(e1));
    the_node.set_e2(visit_Expression(e2));
    the_node
  };

  override def visit_div(the_node:Cdiv,e1:Expression,e2:Expression) : Expression = {
    the_node.set_e1(visit_Expression(e1));
    the_node.set_e2(visit_Expression(e2));
    the_node
  };

  override def visit_neg(the_node:Cneg,e1:Expression) : Expression = {
    the_node.set_e1(visit_Expression(e1));
    the_node
  };

  override def visit_lt(the_node:Clt,e1:Expression,e2:Expression) : Expression = {
    the_node.set_e1(visit_Expression(e1));
    the_node.set_e2(visit_Expression(e2));
    the_node
  };

  override def visit_leq(the_node:Cleq,e1:Expression,e2:Expression) : Expression = {
    the_node.set_e1(visit_Expression(e1));
    the_node.set_e2(visit_Expression(e2));
    the_node
  };

  override def visit_comp(the_node:Ccomp,e1:Expression) : Expression = {
    the_node.set_e1(visit_Expression(e1));
    the_node
  };

  override def visit_int_lit(the_node:Cint_lit,token:Symbol) : Expression = {
    the_node
  };

  override def visit_bool_lit(the_node:Cbool_lit,value:Boolean) : Expression = {
    the_node
  };

  override def visit_string_lit(the_node:Cstring_lit,token:Symbol) : Expression = {
    the_node
  };

  override def visit_alloc(the_node:Calloc,type_name:Symbol) : Expression = {
    the_node
  };

  override def visit_nil(the_node:Cnil) : Expression = {
    the_node
  };

  override def visit_unit(the_node:Cunit) : Expression = {
    the_node
  };

  override def visit_no_expr(the_node:Cno_expr) : Expression = {
    the_node
  };

  override def visit_variable(the_node:Cvariable,name:Symbol) : Expression = {
    the_node
  };
}
// Automatically generated.  Do not edit!
class CoolTreeCopy(var factory : CoolNodeFactory) extends CoolVisitor() {
  var index : ArrayAny = new ArrayAny(100);

  def record_copy(n1 : CoolNode, n2 : CoolNode) : Unit = {
    n2.set_line_number(n1.get_line_number());
    var id : Int = n1.get_id();
    if (index.length() <= id) index = index.resize(id+1) else ();
    index.set(id,n2); ()
  };

  def finish() : Unit = {
    var i : Int = 0;
    var n : Int = index.length();
    while (i < n) {
      index.get(i) match {
        case null => ()
        case node:Program =>
          node.get_any_class() match {
            case null => ()
            case v:Class =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Class => node.set_any_class(w)
                }
              }
          };
          node.get_unit_class() match {
            case null => ()
            case v:Class =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Class => node.set_unit_class(w)
                }
              }
          };
          node.get_int_class() match {
            case null => ()
            case v:Class =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Class => node.set_int_class(w)
                }
              }
          };
          node.get_boolean_class() match {
            case null => ()
            case v:Class =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Class => node.set_boolean_class(w)
                }
              }
          };
          node.get_string_class() match {
            case null => ()
            case v:Class =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Class => node.set_string_class(w)
                }
              }
          };
          ()
        case node:Class =>
          node.get_superclass() match {
            case null => ()
            case v:Class =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Class => node.set_superclass(w)
                }
              }
          };
          ()
        case node:Feature =>
          node.get_owner() match {
            case null => ()
            case v:Cclass_decl =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Cclass_decl => node.set_owner(w)
                }
              }
          };
          node.get_overrides() match {
            case null => ()
            case v:Cmethod =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Cmethod => node.set_overrides(w)
                }
              }
          };
          node.get_feature_of_class() match {
            case null => ()
            case v:Class =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Class => node.set_feature_of_class(w)
                }
              }
          };
          ()
        case node:Formal =>
          node.get_formal_of_class() match {
            case null => ()
            case v:Class =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Class => node.set_formal_of_class(w)
                }
              }
          };
          ()
        case node:Expression =>
          node.get_of_class() match {
            case null => ()
            case v:Class =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Class => node.set_of_class(w)
                }
              }
          };
          node.get_binding() match {
            case null => ()
            case v:CoolNode =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:CoolNode => node.set_binding(w)
                }
              }
          };
          node.get_mbinding() match {
            case null => ()
            case v:Cmethod =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Cmethod => node.set_mbinding(w)
                }
              }
          };
          ()
        case node:Case =>
          node.get_case_of_class() match {
            case null => ()
            case v:Class =>
              var j : Int = v.get_id();
              if (n <= j) () else {
                index.get(j) match {
                  case null => ()
                  case w:Class => node.set_case_of_class(w)
                }
              }
          };
          ()
        case n:CoolNode => n
      };
      i = i + 1
    }
  };


  override def visit_Program(n:Program) : Program = {
    n.accept(this) match {
      case nn:Program =>
        record_copy(n,nn);
        nn.set_any_class(n.get_any_class());
        nn.set_unit_class(n.get_unit_class());
        nn.set_int_class(n.get_int_class());
        nn.set_boolean_class(n.get_boolean_class());
        nn.set_string_class(n.get_string_class());
        nn
    }
  };

  override def visit_Class(n:Class) : Class = {
    n.accept(this) match {
      case nn:Class =>
        record_copy(n,nn);
        nn.set_superclass(n.get_superclass());
        nn.set_inheritablep(n.get_inheritablep());
        nn
    }
  };

  def visit_Classes(node:Classes) : Classes = {
    node match {
      case a:Classes_append => visit_Classes(a.get1()).concat(visit_Classes(a.get2()))
      case a:Classes_one => visit_Classes_one(a.get())
      case a:Classes_nil => a
    }
  };
  override def visit_Classes_one(node:Class) : Classes = {
    new Classes_one(visit_Class(node))
  };

  override def visit_Feature(n:Feature) : Feature = {
    n.accept(this) match {
      case nn:Feature =>
        record_copy(n,nn);
        nn.set_owner(n.get_owner());
        nn.set_overrides(n.get_overrides());
        nn.set_feature_of_class(n.get_feature_of_class());
        nn
    }
  };

  def visit_Features(node:Features) : Features = {
    node match {
      case a:Features_append => visit_Features(a.get1()).concat(visit_Features(a.get2()))
      case a:Features_one => visit_Features_one(a.get())
      case a:Features_nil => a
    }
  };
  override def visit_Features_one(node:Feature) : Features = {
    new Features_one(visit_Feature(node))
  };

  override def visit_Formal(n:Formal) : Formal = {
    n.accept(this) match {
      case nn:Formal =>
        record_copy(n,nn);
        nn.set_formal_of_class(n.get_formal_of_class());
        nn
    }
  };

  def visit_Formals(node:Formals) : Formals = {
    node match {
      case a:Formals_append => visit_Formals(a.get1()).concat(visit_Formals(a.get2()))
      case a:Formals_one => visit_Formals_one(a.get())
      case a:Formals_nil => a
    }
  };
  override def visit_Formals_one(node:Formal) : Formals = {
    new Formals_one(visit_Formal(node))
  };

  override def visit_Expression(n:Expression) : Expression = {
    n.accept(this) match {
      case nn:Expression =>
        record_copy(n,nn);
        nn.set_of_type(n.get_of_type());
        nn.set_of_class(n.get_of_class());
        nn.set_binding(n.get_binding());
        nn.set_mbinding(n.get_mbinding());
        nn
    }
  };

  def visit_Expressions(node:Expressions) : Expressions = {
    node match {
      case a:Expressions_append => visit_Expressions(a.get1()).concat(visit_Expressions(a.get2()))
      case a:Expressions_one => visit_Expressions_one(a.get())
      case a:Expressions_nil => a
    }
  };
  override def visit_Expressions_one(node:Expression) : Expressions = {
    new Expressions_one(visit_Expression(node))
  };

  override def visit_Case(n:Case) : Case = {
    n.accept(this) match {
      case nn:Case =>
        record_copy(n,nn);
        nn.set_case_of_type(n.get_case_of_type());
        nn.set_case_of_class(n.get_case_of_class());
        nn
    }
  };

  def visit_Cases(node:Cases) : Cases = {
    node match {
      case a:Cases_append => visit_Cases(a.get1()).concat(visit_Cases(a.get2()))
      case a:Cases_one => visit_Cases_one(a.get())
      case a:Cases_nil => a
    }
  };
  override def visit_Cases_one(node:Case) : Cases = {
    new Cases_one(visit_Case(node))
  };

  override def visit_program(the_node:Cprogram,classes:Classes) : Program = {
    var classes_ : Classes = visit_Classes(classes);
    factory.program(classes_)
  };

  override def visit_class_decl(the_node:Cclass_decl,name:Symbol,parent:Symbol,features:Features,filename:Symbol) : Class = {
    var name_ : Symbol = name;
    var parent_ : Symbol = parent;
    var features_ : Features = visit_Features(features);
    var filename_ : Symbol = filename;
    factory.class_decl(name_,parent_,features_,filename_)
  };

  override def visit_method(the_node:Cmethod,overridep:Boolean,name:Symbol,formals:Formals,return_type:Symbol,expr:Expression) : Feature = {
    var overridep_ : Boolean = overridep;
    var name_ : Symbol = name;
    var formals_ : Formals = visit_Formals(formals);
    var return_type_ : Symbol = return_type;
    var expr_ : Expression = visit_Expression(expr);
    factory.method(overridep_,name_,formals_,return_type_,expr_)
  };

  override def visit_attr(the_node:Cattr,name:Symbol,of_type:Symbol) : Feature = {
    var name_ : Symbol = name;
    var of_type_ : Symbol = of_type;
    factory.attr(name_,of_type_)
  };

  override def visit_formal(the_node:Cformal,name:Symbol,of_type:Symbol) : Formal = {
    var name_ : Symbol = name;
    var of_type_ : Symbol = of_type;
    factory.formal(name_,of_type_)
  };

  override def visit_branch(the_node:Cbranch,name:Symbol,local_type:Symbol,expr:Expression) : Case = {
    var name_ : Symbol = name;
    var local_type_ : Symbol = local_type;
    var expr_ : Expression = visit_Expression(expr);
    factory.branch(name_,local_type_,expr_)
  };

  override def visit_assign(the_node:Cassign,name:Symbol,expr:Expression) : Expression = {
    var name_ : Symbol = name;
    var expr_ : Expression = visit_Expression(expr);
    factory.assign(name_,expr_)
  };

  override def visit_static_dispatch(the_node:Cstatic_dispatch,expr:Expression,type_name:Symbol,name:Symbol,actuals:Expressions) : Expression = {
    var expr_ : Expression = visit_Expression(expr);
    var type_name_ : Symbol = type_name;
    var name_ : Symbol = name;
    var actuals_ : Expressions = visit_Expressions(actuals);
    factory.static_dispatch(expr_,type_name_,name_,actuals_)
  };

  override def visit_dispatch(the_node:Cdispatch,expr:Expression,name:Symbol,actuals:Expressions) : Expression = {
    var expr_ : Expression = visit_Expression(expr);
    var name_ : Symbol = name;
    var actuals_ : Expressions = visit_Expressions(actuals);
    factory.dispatch(expr_,name_,actuals_)
  };

  override def visit_cond(the_node:Ccond,pred:Expression,then_exp:Expression,else_exp:Expression) : Expression = {
    var pred_ : Expression = visit_Expression(pred);
    var then_exp_ : Expression = visit_Expression(then_exp);
    var else_exp_ : Expression = visit_Expression(else_exp);
    factory.cond(pred_,then_exp_,else_exp_)
  };

  override def visit_loop(the_node:Cloop,pred:Expression,body:Expression) : Expression = {
    var pred_ : Expression = visit_Expression(pred);
    var body_ : Expression = visit_Expression(body);
    factory.loop(pred_,body_)
  };

  override def visit_typecase(the_node:Ctypecase,expr:Expression,cases:Cases) : Expression = {
    var expr_ : Expression = visit_Expression(expr);
    var cases_ : Cases = visit_Cases(cases);
    factory.typecase(expr_,cases_)
  };

  override def visit_block(the_node:Cblock,body:Expressions) : Expression = {
    var body_ : Expressions = visit_Expressions(body);
    factory.block(body_)
  };

  override def visit_let(the_node:Clet,identifier:Symbol,local_type:Symbol,init:Expression,body:Expression) : Expression = {
    var identifier_ : Symbol = identifier;
    var local_type_ : Symbol = local_type;
    var init_ : Expression = visit_Expression(init);
    var body_ : Expression = visit_Expression(body);
    factory.let(identifier_,local_type_,init_,body_)
  };

  override def visit_add(the_node:Cadd,e1:Expression,e2:Expression) : Expression = {
    var e1_ : Expression = visit_Expression(e1);
    var e2_ : Expression = visit_Expression(e2);
    factory.add(e1_,e2_)
  };

  override def visit_sub(the_node:Csub,e1:Expression,e2:Expression) : Expression = {
    var e1_ : Expression = visit_Expression(e1);
    var e2_ : Expression = visit_Expression(e2);
    factory.sub(e1_,e2_)
  };

  override def visit_mul(the_node:Cmul,e1:Expression,e2:Expression) : Expression = {
    var e1_ : Expression = visit_Expression(e1);
    var e2_ : Expression = visit_Expression(e2);
    factory.mul(e1_,e2_)
  };

  override def visit_div(the_node:Cdiv,e1:Expression,e2:Expression) : Expression = {
    var e1_ : Expression = visit_Expression(e1);
    var e2_ : Expression = visit_Expression(e2);
    factory.div(e1_,e2_)
  };

  override def visit_neg(the_node:Cneg,e1:Expression) : Expression = {
    var e1_ : Expression = visit_Expression(e1);
    factory.neg(e1_)
  };

  override def visit_lt(the_node:Clt,e1:Expression,e2:Expression) : Expression = {
    var e1_ : Expression = visit_Expression(e1);
    var e2_ : Expression = visit_Expression(e2);
    factory.lt(e1_,e2_)
  };

  override def visit_leq(the_node:Cleq,e1:Expression,e2:Expression) : Expression = {
    var e1_ : Expression = visit_Expression(e1);
    var e2_ : Expression = visit_Expression(e2);
    factory.leq(e1_,e2_)
  };

  override def visit_comp(the_node:Ccomp,e1:Expression) : Expression = {
    var e1_ : Expression = visit_Expression(e1);
    factory.comp(e1_)
  };

  override def visit_int_lit(the_node:Cint_lit,token:Symbol) : Expression = {
    var token_ : Symbol = token;
    factory.int_lit(token_)
  };

  override def visit_bool_lit(the_node:Cbool_lit,value:Boolean) : Expression = {
    var value_ : Boolean = value;
    factory.bool_lit(value_)
  };

  override def visit_string_lit(the_node:Cstring_lit,token:Symbol) : Expression = {
    var token_ : Symbol = token;
    factory.string_lit(token_)
  };

  override def visit_alloc(the_node:Calloc,type_name:Symbol) : Expression = {
    var type_name_ : Symbol = type_name;
    factory.alloc(type_name_)
  };

  override def visit_nil(the_node:Cnil) : Expression = {
    factory.nil()
  };

  override def visit_unit(the_node:Cunit) : Expression = {
    factory.unit()
  };

  override def visit_no_expr(the_node:Cno_expr) : Expression = {
    factory.no_expr()
  };

  override def visit_variable(the_node:Cvariable,name:Symbol) : Expression = {
    var name_ : Symbol = name;
    factory.variable(name_)
  };
}
class CoolAbstractTreeDumper() extends CoolTreeVisitor() {
  var indent : Int = 0;

  def dump(n : CoolNode) : Any = {
    indent = 0;
    n.accept(this)
  };

  def out_indent() : Unit = {
    var i : Int = 0;
    while (i < indent) {
      out("  ");
      i = i + 1
    }
  };

  def out_attribute(label : String, value : String, default : String) : 
Any = {
    if (value == default) null
    else {
      out_indent();
      out(">");
      out(label);
      out(" = ");
      out(value);
      out("\n")
    }
  };

  def dump_Any(v : Any) : String = {
    if (is_null(v)) "null" else v.toString()
  };

  def dump_remote(v : CoolNode) : String = dump_Any(v);

  def dump_Symbol(v : Symbol) : String = dump_Any(v);

  def dump_Boolean(v : Boolean) : String = dump_Any(v);

  override def visit_Program(n : Program) : Any = {
    out_attribute("any_class",dump_remote(n.get_any_class()),any_class_default);
    out_attribute("unit_class",dump_remote(n.get_unit_class()),unit_class_default);
    out_attribute("int_class",dump_remote(n.get_int_class()),int_class_default);
    out_attribute("boolean_class",dump_remote(n.get_boolean_class()),boolean_class_default);
    out_attribute("string_class",dump_remote(n.get_string_class()),string_class_default);
    null
  };

  override def visit_Class(n : Class) : Any = {
    out_attribute("superclass",dump_remote(n.get_superclass()),superclass_default);
    out_attribute("inheritablep",dump_Boolean(n.get_inheritablep()),inheritablep_default);
    null
  };

  override def visit_Classes_one(e : Class) : Any = {
    indent = indent + 1;
    super.visit_Classes_one(e);
    indent = indent - 1
  };

  override def visit_Feature(n : Feature) : Any = {
    out_attribute("owner",dump_Cclass_decl(n.get_owner()),owner_default);
    out_attribute("overrides",dump_Cmethod(n.get_overrides()),overrides_default);
    out_attribute("feature_of_class",dump_remote(n.get_feature_of_class()),feature_of_class_default);
    null
  };

  override def visit_Features_one(e : Feature) : Any = {
    indent = indent + 1;
    super.visit_Features_one(e);
    indent = indent - 1
  };

  override def visit_Formal(n : Formal) : Any = {
    out_attribute("formal_of_class",dump_remote(n.get_formal_of_class()),formal_of_class_default);
    null
  };

  override def visit_Formals_one(e : Formal) : Any = {
    indent = indent + 1;
    super.visit_Formals_one(e);
    indent = indent - 1
  };

  override def visit_Expression(n : Expression) : Any = {
    out_attribute("of_type",dump_Symbol(n.get_of_type()),of_type_default);
    out_attribute("of_class",dump_remote(n.get_of_class()),of_class_default);
    out_attribute("binding",dump_CoolNode(n.get_binding()),binding_default);
    out_attribute("mbinding",dump_Cmethod(n.get_mbinding()),mbinding_default);
    null
  };

  override def visit_Expressions_one(e : Expression) : Any = {
    indent = indent + 1;
    super.visit_Expressions_one(e);
    indent = indent - 1
  };

  override def visit_Case(n : Case) : Any = {
    out_attribute("case_of_type",dump_Symbol(n.get_case_of_type()),case_of_type_default);
    out_attribute("case_of_class",dump_remote(n.get_case_of_class()),case_of_class_default);
    null
  };

  override def visit_Cases_one(e : Case) : Any = {
    indent = indent + 1;
    super.visit_Cases_one(e);
    indent = indent - 1
  };

  override def visit_program(the_node:Cprogram,classes:Classes) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = program:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_program(the_node,classes);
    indent = indent - 1
  };

  override def visit_class_decl(the_node:Cclass_decl,name:Symbol,parent:Symbol,features:Features,filename:Symbol) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = class_decl:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Symbol(name)).out(" ");
    out(dump_Symbol(parent)).out(" ");
    out(dump_Symbol(filename)).out(" ");
    out("\n");
    super.visit_class_decl(the_node,name,parent,features,filename);
    indent = indent - 1
  };

  override def visit_method(the_node:Cmethod,overridep:Boolean,name:Symbol,formals:Formals,return_type:Symbol,expr:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = method:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Boolean(overridep)).out(" ");
    out(dump_Symbol(name)).out(" ");
    out(dump_Symbol(return_type)).out(" ");
    out("\n");
    super.visit_method(the_node,overridep,name,formals,return_type,expr);
    indent = indent - 1
  };

  override def visit_attr(the_node:Cattr,name:Symbol,of_type:Symbol) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = attr:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Symbol(name)).out(" ");
    out(dump_Symbol(of_type)).out(" ");
    out("\n");
    super.visit_attr(the_node,name,of_type);
    indent = indent - 1
  };

  override def visit_formal(the_node:Cformal,name:Symbol,of_type:Symbol) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = formal:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Symbol(name)).out(" ");
    out(dump_Symbol(of_type)).out(" ");
    out("\n");
    super.visit_formal(the_node,name,of_type);
    indent = indent - 1
  };

  override def visit_branch(the_node:Cbranch,name:Symbol,local_type:Symbol,expr:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = branch:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Symbol(name)).out(" ");
    out(dump_Symbol(local_type)).out(" ");
    out("\n");
    super.visit_branch(the_node,name,local_type,expr);
    indent = indent - 1
  };

  override def visit_assign(the_node:Cassign,name:Symbol,expr:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = assign:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Symbol(name)).out(" ");
    out("\n");
    super.visit_assign(the_node,name,expr);
    indent = indent - 1
  };

  override def visit_static_dispatch(the_node:Cstatic_dispatch,expr:Expression,type_name:Symbol,name:Symbol,actuals:Expressions) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = static_dispatch:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Symbol(type_name)).out(" ");
    out(dump_Symbol(name)).out(" ");
    out("\n");
    super.visit_static_dispatch(the_node,expr,type_name,name,actuals);
    indent = indent - 1
  };

  override def visit_dispatch(the_node:Cdispatch,expr:Expression,name:Symbol,actuals:Expressions) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = dispatch:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Symbol(name)).out(" ");
    out("\n");
    super.visit_dispatch(the_node,expr,name,actuals);
    indent = indent - 1
  };

  override def visit_cond(the_node:Ccond,pred:Expression,then_exp:Expression,else_exp:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = cond:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_cond(the_node,pred,then_exp,else_exp);
    indent = indent - 1
  };

  override def visit_loop(the_node:Cloop,pred:Expression,body:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = loop:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_loop(the_node,pred,body);
    indent = indent - 1
  };

  override def visit_typecase(the_node:Ctypecase,expr:Expression,cases:Cases) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = typecase:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_typecase(the_node,expr,cases);
    indent = indent - 1
  };

  override def visit_block(the_node:Cblock,body:Expressions) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = block:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_block(the_node,body);
    indent = indent - 1
  };

  override def visit_let(the_node:Clet,identifier:Symbol,local_type:Symbol,init:Expression,body:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = let:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Symbol(identifier)).out(" ");
    out(dump_Symbol(local_type)).out(" ");
    out("\n");
    super.visit_let(the_node,identifier,local_type,init,body);
    indent = indent - 1
  };

  override def visit_add(the_node:Cadd,e1:Expression,e2:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = add:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_add(the_node,e1,e2);
    indent = indent - 1
  };

  override def visit_sub(the_node:Csub,e1:Expression,e2:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = sub:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_sub(the_node,e1,e2);
    indent = indent - 1
  };

  override def visit_mul(the_node:Cmul,e1:Expression,e2:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = mul:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_mul(the_node,e1,e2);
    indent = indent - 1
  };

  override def visit_div(the_node:Cdiv,e1:Expression,e2:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = div:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_div(the_node,e1,e2);
    indent = indent - 1
  };

  override def visit_neg(the_node:Cneg,e1:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = neg:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_neg(the_node,e1);
    indent = indent - 1
  };

  override def visit_lt(the_node:Clt,e1:Expression,e2:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = lt:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_lt(the_node,e1,e2);
    indent = indent - 1
  };

  override def visit_leq(the_node:Cleq,e1:Expression,e2:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = leq:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_leq(the_node,e1,e2);
    indent = indent - 1
  };

  override def visit_comp(the_node:Ccomp,e1:Expression) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = comp:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_comp(the_node,e1);
    indent = indent - 1
  };

  override def visit_int_lit(the_node:Cint_lit,token:Symbol) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = int_lit:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Symbol(token)).out(" ");
    out("\n");
    super.visit_int_lit(the_node,token);
    indent = indent - 1
  };

  override def visit_bool_lit(the_node:Cbool_lit,value:Boolean) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = bool_lit:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Boolean(value)).out(" ");
    out("\n");
    super.visit_bool_lit(the_node,value);
    indent = indent - 1
  };

  override def visit_string_lit(the_node:Cstring_lit,token:Symbol) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = string_lit:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Symbol(token)).out(" ");
    out("\n");
    super.visit_string_lit(the_node,token);
    indent = indent - 1
  };

  override def visit_alloc(the_node:Calloc,type_name:Symbol) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = alloc:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Symbol(type_name)).out(" ");
    out("\n");
    super.visit_alloc(the_node,type_name);
    indent = indent - 1
  };

  override def visit_nil(the_node:Cnil) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = nil:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_nil(the_node);
    indent = indent - 1
  };

  override def visit_unit(the_node:Cunit) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = unit:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_unit(the_node);
    indent = indent - 1
  };

  override def visit_no_expr(the_node:Cno_expr) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = no_expr:");
    out(the_node.get_line_number().toString()).out(" ");
    out("\n");
    super.visit_no_expr(the_node);
    indent = indent - 1
  };

  override def visit_variable(the_node:Cvariable,name:Symbol) : Any = {
    out_indent();
    indent = indent + 1;
    out("@").out(the_node.get_id().toString()).out(" = variable:");
    out(the_node.get_line_number().toString()).out(" ");
    out(dump_Symbol(name)).out(" ");
    out("\n");
    super.visit_variable(the_node,name);
    indent = indent - 1
  };

  def dump_CoolNode(v : CoolNode) : String = dump_Any(v);

  def dump_Cmethod(v : Cmethod) : String = dump_Any(v);

  def dump_Cclass_decl(v : Cclass_decl) : String = dump_Any(v);

  var any_class_default : String = dump_remote(null);

  var unit_class_default : String = dump_remote(null);

  var int_class_default : String = dump_remote(null);

  var boolean_class_default : String = dump_remote(null);

  var string_class_default : String = dump_remote(null);

  var superclass_default : String = dump_remote(null);

  var inheritablep_default : String = dump_Boolean(false);

  var owner_default : String = dump_Cclass_decl(null);

  var overrides_default : String = dump_Cmethod(null);

  var feature_of_class_default : String = dump_remote(null);

  var formal_of_class_default : String = dump_remote(null);

  var case_of_type_default : String = dump_Symbol(null);

  var case_of_class_default : String = dump_remote(null);

  var of_type_default : String = dump_Symbol(null);

  var of_class_default : String = dump_remote(null);

  var binding_default : String = dump_CoolNode(null);

  var mbinding_default : String = dump_Cmethod(null);
}
class CoolTreeParserAttribute(var node : CoolNode, var name : String, var value : String) 
{
  def get_node() : CoolNode = node;
  def get_name() : String = name;
  def get_value() : String = value;

  def set_node(n : CoolNode) : Unit = node = n;
}

class CoolAbstractTreeParser() extends IO() {
  var all_nodes : ArrayAny = new ArrayAny(10);

  def set(i : Int, n : CoolNode) : Unit = {
    while (all_nodes.length() <= i) {
      all_nodes = all_nodes.resize(all_nodes.length()*2)
    };
    all_nodes.set(i,n);
    ()
  };

  def get(i : Int) : CoolNode = all_nodes.get(i) match {
    case n:CoolNode => n
  };

  var all_attrs : ArrayAny = new ArrayAny(10);
  var num_attrs : Int = 0;

  var converter : A2I = new A2I();

  def add(a : CoolTreeParserAttribute) : Unit = {
    while (all_attrs.length() <= num_attrs) {
      all_attrs = all_attrs.resize(all_attrs.length()*2)
    };
    all_attrs.set(num_attrs,a);
    num_attrs = num_attrs + 1
  };

  var current : String = null;
  var current_in : Int = 0;
  var current_id : Int = 0;
  var current_name : String = "";
  var current_lno : Int = 0;
  var current_vals : String = "";

  var max_id : Int = 0;
  def get_max_id() : Int = max_id;

  def read_next_line() : Unit = {
    var i : Int = 0;
    current = in();
    if (is_null(current)) {
      current = "X"
    } else ();
    while (current.charAt(i) == 32) i = i + 1;
    current_in = i;
    current = current.substring(i,current.length())
  };

  def start() : Unit = read_next_line();

  def check_indent(indent : Int) : Unit =
    if (indent == current_in) ()
    else abort("indentation wrong");

  def split_node_line() : Unit = {
    var st : String = current;
    var sep : Int = st.indexOf(" ");
    current_id = converter.a2i(st.substring(1,sep));
    if (max_id < current_id) max_id = current_id else ();
    st = st.substring(sep+3,st.length());
    var col : Int = st.indexOf(":");
    current_name = st.substring(0,col);
    sep = st.indexOf(" ");
    current_lno = converter.a2i(st.substring(col+1,sep));
    current_vals = st.substring(sep+1,st.length())
  };

  def next_value() : String = {
    var sep : Int = current_vals.indexOf(" ");
    var result : String = current_vals.substring(0,sep);
    current_vals = current_vals.substring(sep+1,current_vals.length());
    result
  };

  def set_node_numbers(node : CoolNode, id : Int, lno : Int) : Unit = {
    node.set_id(id);
    node.set_line_number(lno);
    set(id,node)
  };

  def handle_attr_line() : Unit = {
    var st : String = current;
    var sep : Int = st.indexOf(" ");
    var name : String = current.substring(1,sep);
    var value : String = current.substring(sep+3,st.length());
    add(new CoolTreeParserAttribute(null,name,value))
  };

  def read_attributes() : Unit = {
    read_next_line();
    while (current.charAt(0) == 62) {
      handle_attr_line();
      read_next_line()
    }
  };

  def allocate_attrs(before : Int, after : Int, node : CoolNode) : Unit = {
    var i : Int = before;
    while (i < after) {
      all_attrs.get(i) match {
	case a:CoolTreeParserAttribute =>
	  a.set_node(node)
      };
      i = i + 1
    }
  };

  def resolve_attributes() : Unit = {
    var i : Int = 0;
    while (i < num_attrs) {
      all_attrs.get(i) match {
	case a:CoolTreeParserAttribute =>
	  resolve_attr(a.get_node(),a.get_name(),a.get_value())
      };
      i = i + 1
    }
  };

  def parse_remote(s : String) : CoolNode = {
    all_nodes.get(converter.a2i(s.substring(1,s.length()))) match {
      case n:CoolNode => n
    }
  };

  def parse_Symbol(s : String) : Symbol = abort("abstract parse_Symbol");

  def parse_Boolean(s : String) : Boolean = abort("abstract parse_Boolean");

  def parse_Classes(pindent : Int) : Classes = {
    var indent : Int = pindent + 2;
    var result : Classes = new Classes_nil();
    while (current_in == indent) {
      result = result.addcopy(parse_Class(indent))
    };
    result
  };

  def parse_Features(pindent : Int) : Features = {
    var indent : Int = pindent + 2;
    var result : Features = new Features_nil();
    while (current_in == indent) {
      result = result.addcopy(parse_Feature(indent))
    };
    result
  };

  def parse_Formals(pindent : Int) : Formals = {
    var indent : Int = pindent + 2;
    var result : Formals = new Formals_nil();
    while (current_in == indent) {
      result = result.addcopy(parse_Formal(indent))
    };
    result
  };

  def parse_Expressions(pindent : Int) : Expressions = {
    var indent : Int = pindent + 2;
    var result : Expressions = new Expressions_nil();
    while (current_in == indent) {
      result = result.addcopy(parse_Expression(indent))
    };
    result
  };

  def parse_Cases(pindent : Int) : Cases = {
    var indent : Int = pindent + 2;
    var result : Cases = new Cases_nil();
    while (current_in == indent) {
      result = result.addcopy(parse_Case(indent))
    };
    result
  };

  def parse_Program(indent : Int) : Program = {
    check_indent(indent);
    split_node_line();
    var id : Int = current_id;
    var lno : Int = current_lno;
    var before : Int = num_attrs;
    var after : Int = before;
    var node : Program =
      if (current_name == "program") {
        read_attributes();
        after = num_attrs;
        var classes : Classes = parse_Classes(indent+2);
        new Cprogram(classes)
      } else abort(current_name.concat(" is not a Program"));
    allocate_attrs(before,after,node);
    set_node_numbers(node,id,lno);
    node
  };

  def parse_Class(indent : Int) : Class = {
    check_indent(indent);
    split_node_line();
    var id : Int = current_id;
    var lno : Int = current_lno;
    var before : Int = num_attrs;
    var after : Int = before;
    var node : Class =
      if (current_name == "class_decl") {
        var name : Symbol = parse_Symbol(next_value());
        var parent : Symbol = parse_Symbol(next_value());
        var filename : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        var features : Features = parse_Features(indent+2);
        new Cclass_decl(name,parent,features,filename)
      } else abort(current_name.concat(" is not a Class"));
    allocate_attrs(before,after,node);
    set_node_numbers(node,id,lno);
    node
  };

  def parse_Feature(indent : Int) : Feature = {
    check_indent(indent);
    split_node_line();
    var id : Int = current_id;
    var lno : Int = current_lno;
    var before : Int = num_attrs;
    var after : Int = before;
    var node : Feature =
      if (current_name == "method") {
        var overridep : Boolean = parse_Boolean(next_value());
        var name : Symbol = parse_Symbol(next_value());
        var return_type : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        var formals : Formals = parse_Formals(indent+2);
        var expr : Expression = parse_Expression(indent+2);
        new Cmethod(overridep,name,formals,return_type,expr)
      } else if (current_name == "attr") {
        var name : Symbol = parse_Symbol(next_value());
        var of_type : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        new Cattr(name,of_type)
      } else abort(current_name.concat(" is not a Feature"));
    allocate_attrs(before,after,node);
    set_node_numbers(node,id,lno);
    node
  };

  def parse_Formal(indent : Int) : Formal = {
    check_indent(indent);
    split_node_line();
    var id : Int = current_id;
    var lno : Int = current_lno;
    var before : Int = num_attrs;
    var after : Int = before;
    var node : Formal =
      if (current_name == "formal") {
        var name : Symbol = parse_Symbol(next_value());
        var of_type : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        new Cformal(name,of_type)
      } else abort(current_name.concat(" is not a Formal"));
    allocate_attrs(before,after,node);
    set_node_numbers(node,id,lno);
    node
  };

  def parse_Case(indent : Int) : Case = {
    check_indent(indent);
    split_node_line();
    var id : Int = current_id;
    var lno : Int = current_lno;
    var before : Int = num_attrs;
    var after : Int = before;
    var node : Case =
      if (current_name == "branch") {
        var name : Symbol = parse_Symbol(next_value());
        var local_type : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        var expr : Expression = parse_Expression(indent+2);
        new Cbranch(name,local_type,expr)
      } else abort(current_name.concat(" is not a Case"));
    allocate_attrs(before,after,node);
    set_node_numbers(node,id,lno);
    node
  };

  def parse_Expression(indent : Int) : Expression = {
    check_indent(indent);
    split_node_line();
    var id : Int = current_id;
    var lno : Int = current_lno;
    var before : Int = num_attrs;
    var after : Int = before;
    var node : Expression =
      if (current_name == "assign") {
        var name : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        var expr : Expression = parse_Expression(indent+2);
        new Cassign(name,expr)
      } else if (current_name == "static_dispatch") {
        var type_name : Symbol = parse_Symbol(next_value());
        var name : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        var expr : Expression = parse_Expression(indent+2);
        var actuals : Expressions = parse_Expressions(indent+2);
        new Cstatic_dispatch(expr,type_name,name,actuals)
      } else if (current_name == "dispatch") {
        var name : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        var expr : Expression = parse_Expression(indent+2);
        var actuals : Expressions = parse_Expressions(indent+2);
        new Cdispatch(expr,name,actuals)
      } else if (current_name == "cond") {
        read_attributes();
        after = num_attrs;
        var pred : Expression = parse_Expression(indent+2);
        var then_exp : Expression = parse_Expression(indent+2);
        var else_exp : Expression = parse_Expression(indent+2);
        new Ccond(pred,then_exp,else_exp)
      } else if (current_name == "loop") {
        read_attributes();
        after = num_attrs;
        var pred : Expression = parse_Expression(indent+2);
        var body : Expression = parse_Expression(indent+2);
        new Cloop(pred,body)
      } else if (current_name == "typecase") {
        read_attributes();
        after = num_attrs;
        var expr : Expression = parse_Expression(indent+2);
        var cases : Cases = parse_Cases(indent+2);
        new Ctypecase(expr,cases)
      } else if (current_name == "block") {
        read_attributes();
        after = num_attrs;
        var body : Expressions = parse_Expressions(indent+2);
        new Cblock(body)
      } else if (current_name == "let") {
        var identifier : Symbol = parse_Symbol(next_value());
        var local_type : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        var init : Expression = parse_Expression(indent+2);
        var body : Expression = parse_Expression(indent+2);
        new Clet(identifier,local_type,init,body)
      } else if (current_name == "add") {
        read_attributes();
        after = num_attrs;
        var e1 : Expression = parse_Expression(indent+2);
        var e2 : Expression = parse_Expression(indent+2);
        new Cadd(e1,e2)
      } else if (current_name == "sub") {
        read_attributes();
        after = num_attrs;
        var e1 : Expression = parse_Expression(indent+2);
        var e2 : Expression = parse_Expression(indent+2);
        new Csub(e1,e2)
      } else if (current_name == "mul") {
        read_attributes();
        after = num_attrs;
        var e1 : Expression = parse_Expression(indent+2);
        var e2 : Expression = parse_Expression(indent+2);
        new Cmul(e1,e2)
      } else if (current_name == "div") {
        read_attributes();
        after = num_attrs;
        var e1 : Expression = parse_Expression(indent+2);
        var e2 : Expression = parse_Expression(indent+2);
        new Cdiv(e1,e2)
      } else if (current_name == "neg") {
        read_attributes();
        after = num_attrs;
        var e1 : Expression = parse_Expression(indent+2);
        new Cneg(e1)
      } else if (current_name == "lt") {
        read_attributes();
        after = num_attrs;
        var e1 : Expression = parse_Expression(indent+2);
        var e2 : Expression = parse_Expression(indent+2);
        new Clt(e1,e2)
      } else if (current_name == "leq") {
        read_attributes();
        after = num_attrs;
        var e1 : Expression = parse_Expression(indent+2);
        var e2 : Expression = parse_Expression(indent+2);
        new Cleq(e1,e2)
      } else if (current_name == "comp") {
        read_attributes();
        after = num_attrs;
        var e1 : Expression = parse_Expression(indent+2);
        new Ccomp(e1)
      } else if (current_name == "int_lit") {
        var token : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        new Cint_lit(token)
      } else if (current_name == "bool_lit") {
        var value : Boolean = parse_Boolean(next_value());
        read_attributes();
        after = num_attrs;
        new Cbool_lit(value)
      } else if (current_name == "string_lit") {
        var token : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        new Cstring_lit(token)
      } else if (current_name == "alloc") {
        var type_name : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        new Calloc(type_name)
      } else if (current_name == "nil") {
        read_attributes();
        after = num_attrs;
        new Cnil()
      } else if (current_name == "unit") {
        read_attributes();
        after = num_attrs;
        new Cunit()
      } else if (current_name == "no_expr") {
        read_attributes();
        after = num_attrs;
        new Cno_expr()
      } else if (current_name == "variable") {
        var name : Symbol = parse_Symbol(next_value());
        read_attributes();
        after = num_attrs;
        new Cvariable(name)
      } else abort(current_name.concat(" is not a Expression"));
    allocate_attrs(before,after,node);
    set_node_numbers(node,id,lno);
    node
  };

  def parse_CoolNode(s : String) : CoolNode = abort("abstract parse_CoolNode");

  def parse_Cmethod(s : String) : Cmethod = abort("abstract parse_Cmethod");

  def parse_Cclass_decl(s : String) : Cclass_decl = abort("abstract parse_Cclass_decl");

  def resolve_attr(node:CoolNode,name:String,value:String) : Unit =
    node match {
      case n:Program =>
        if (name == "any_class") parse_remote(value) match {
          case m:Class => n.set_any_class(m) }
        else if (name == "unit_class") parse_remote(value) match {
          case m:Class => n.set_unit_class(m) }
        else if (name == "int_class") parse_remote(value) match {
          case m:Class => n.set_int_class(m) }
        else if (name == "boolean_class") parse_remote(value) match {
          case m:Class => n.set_boolean_class(m) }
        else if (name == "string_class") parse_remote(value) match {
          case m:Class => n.set_string_class(m) }
        else abort("unknown attribute: ".concat(name))
      case n:Class =>
        if (name == "superclass") parse_remote(value) match {
          case m:Class => n.set_superclass(m) }
        else if (name == "inheritablep") n.set_inheritablep(parse_Boolean(value))
        else abort("unknown attribute: ".concat(name))
      case n:Feature =>
        if (name == "owner") n.set_owner(parse_Cclass_decl(value))
        else if (name == "overrides") n.set_overrides(parse_Cmethod(value))
        else if (name == "feature_of_class") parse_remote(value) match {
          case m:Class => n.set_feature_of_class(m) }
        else abort("unknown attribute: ".concat(name))
      case n:Formal =>
        if (name == "formal_of_class") parse_remote(value) match {
          case m:Class => n.set_formal_of_class(m) }
        else abort("unknown attribute: ".concat(name))
      case n:Case =>
        if (name == "case_of_type") n.set_case_of_type(parse_Symbol(value))
        else if (name == "case_of_class") parse_remote(value) match {
          case m:Class => n.set_case_of_class(m) }
        else abort("unknown attribute: ".concat(name))
      case n:Expression =>
        if (name == "of_type") n.set_of_type(parse_Symbol(value))
        else if (name == "of_class") parse_remote(value) match {
          case m:Class => n.set_of_class(m) }
        else if (name == "binding") n.set_binding(parse_CoolNode(value))
        else if (name == "mbinding") n.set_mbinding(parse_Cmethod(value))
        else abort("unknown attribute: ".concat(name))
    };
}
class CoolTreeParser() extends CoolAbstractTreeParser()
{
  def parse_String(s : String) : String = {
    var sb : StringBuilder = new StringBuilder();
    var i : Int = 0;
    var n : Int = s.length();
    var mark : Int = 0;
    while (i < n) {
      var ch : Int = s.charAt(i);
      var add : String = null;
      if (ch == 92) {
	ch = s.charAt(i+1);
	if (ch == 92) add = "\\"
	else if (ch == 115) add = " "
	else if (ch == 110) add = "\n"
	else if (ch == 114) add = "\r"
	else if (ch == 48) add = "
      }
    }
  }
}